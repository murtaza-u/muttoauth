#!/usr/bin/env bash

set -e

### change these

# client id
id="*********************************************.apps.googleusercontent.com"

# client secret
secret="***********************************"

# gpg key id(gpg --list-secret-keys --keyid-format LONG)
keyid="****************"


redirect_uri="urn:ietf:wg:oauth:2.0:oob"
scope="https://mail.google.com/"
auth_uri="https://accounts.google.com/o/oauth2/auth?client_id=$id&redirect_uri=$redirect_uri&scope=$scope&response_type=code"
tkn_uri="https://accounts.google.com/o/oauth2/token"

generate() {
    file="$1"
    if [[ -z "$file" ]]; then
        echo "error: token file not provided"
        exit 1
    fi

    echo "Open this URL in a web browser"
    echo "Copy the authorization code and paste it below"
    echo "$auth_uri"

    read -r -p "Authorization Code: " code
    data="code=$code&client_id=$id&client_secret=$secret&redirect_uri=$redirect_uri&grant_type=authorization_code"

    curl -s -X POST -d "$data" "$tkn_uri" |
        jq -r '.refresh_token' > "$file"

    gpg -e --armor -r "$keyid" "$file"
    shred -u "$file"
    mv "$file.asc" "$file"
}

refresh() {
    file="$1"
    if [[ -z "$file" ]]; then
        echo "error: token file not provided"
        exit 1
    fi

    tkn="$(gpg -q -d "$file")"
    curl -s -X POST -d \
        "client_id=$id&client_secret=$secret&refresh_token=$tkn&grant_type=refresh_token" \
        "$tkn_uri" | jq -r '.access_token'
}

dependency() {
    declare -a dependencies=( "curl" "jq" "gpg" "shred" )

    for d in "${dependencies[@]}"; do
        if [[ -z "$(command -v "$d")" ]]; then
            echo "[ ] $d"
            continue
        fi

        echo "[x] $d"
    done
}

help() {
    echo "${1##*/} [-g|-r|-d|-h] [TKN_FILE]
    -g TKN_FILE
        * Generates a new token
        * Saves the refresh token to the specified path

    -r TKN_FILE
        Refreshes access token and outputs it to stdout

    -d
        Dependency check

    -h
        Help"
}

if [[ -z "$*" ]]; then
    echo "error: no arguments provided"
    exit 1
fi

while getopts "hgrd" arg 2>/dev/null; do
    case "${arg}" in
        h) help "$0" ;;
        g) generate "$2" ;;
        r) refresh "$2" ;;
        d) dependency ;;
        *) echo "error: invalid arguments"; exit 1 ;;
    esac
done
